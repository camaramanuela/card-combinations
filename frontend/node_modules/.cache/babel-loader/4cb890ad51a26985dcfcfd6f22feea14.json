{"ast":null,"code":"var _jsxFileName = \"/home/bognar/\\xC1rea de Trabalho/frontend-assesment-master/frontend/src/pages/DeckId/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './styles.css';\nimport Card from '../../components/Card';\n\nfunction DeckId() {\n  const [pileSuit, setPileSuit] = useState([]);\n  const [pileValues, setPileValues] = useState([]);\n  const [pileSuitSorted, setPileSuitSorted] = useState([]);\n  const [pileValueSorted, setPileValueSorted] = useState([]);\n  const [rotationCardSuit, setRotationCardSuit] = useState();\n  const [rotationCardValue, setRotationCardValue] = useState();\n  const [fullHouseCombinations, setFullHouseCombinations] = useState([]);\n  useEffect(() => {\n    var url = window.location.pathname;\n    var id = url.substring(url.lastIndexOf('/') + 1); // pega as cartas selecionadas na rota anterior\n\n    axios({\n      method: 'get',\n      url: `https://deckofcardsapi.com/api/deck/${id}/pile/pile_deck/list/`\n    }).then(response => {\n      const suits = response.data.piles.pile_deck.cards.map(card => card.suit);\n      setPileSuit(suits);\n      const values = response.data.piles.pile_deck.cards.map(card => card.value);\n      setPileValues(values);\n    }); // pega a carta de rotação selecionada na rota anterior\n\n    axios({\n      method: 'get',\n      url: `https://deckofcardsapi.com/api/deck/${id}/pile/pile_rotation/list/`\n    }).then(response => {\n      setRotationCardSuit(response.data.piles.pile_rotation.cards[0].suit);\n      setRotationCardValue(response.data.piles.pile_rotation.cards[0].value);\n    });\n  }, []);\n  useEffect(() => {\n    // input de cartas\n    const pile_naipe = pileSuit.map(card => card);\n    const pile_values = pileValues.map(card => card); // ordem proposta\n\n    const naipes = ['HEARTS', 'DIAMONDS', 'CLUBS', 'SPADES'];\n    const valores = ['2', 'ACE', 'KING', 'QUEEN', 'JACK', '10', '9', '8', '7', '6', '5', '4', '3']; // carta de rotacao\n\n    const rotationCardValor = rotationCardValue;\n    const rotationCardNaipe = rotationCardSuit; // dividir as array e passar quem ta na frente da rotation card pra trás\n\n    var i = 0;\n    var j = 0; // criando nova array de naipes, com base na carta de rotacao\n\n    const naipesOrder = [];\n\n    for (i = 0; i < 4; i++) {\n      if (naipes[i] === rotationCardNaipe) {\n        for (j = 0; j < i; j++) {\n          naipesOrder[j] = naipes[i];\n          if (i < 4) i++;\n        }\n      }\n    }\n\n    j = 0;\n\n    for (i = 0; i < 4; i++) {\n      if (naipesOrder[i] === undefined) {\n        naipesOrder[i] = naipes[j];\n        j++;\n      }\n    } // criando nova array de valores, com base na carta de rotacao\n\n\n    const valuesOrder = [];\n\n    for (i = 0; i < 13; i++) {\n      if (valores[i] === rotationCardValor) {\n        for (j = 0; j < i; j++) {\n          valuesOrder[j] = valores[i];\n          if (i < 13) i++;\n        }\n      }\n    }\n\n    j = 0;\n\n    for (i = 0; i < 13; i++) {\n      if (valuesOrder[i] === undefined) {\n        valuesOrder[i] = valores[j];\n        j++;\n      }\n    } // Ordenando as pilhas de cartas com base na carta de rotação\n\n\n    const pile_naipe_ordenados = [];\n    const pile_values_ordenados = [];\n    var n = 0; // ordenando os naipes\n\n    for (j = 0; j < 4; j++) {\n      for (i = 0; i < 13; i++) {\n        if (pile_naipe[i] === naipesOrder[j]) {\n          pile_naipe_ordenados[n] = pile_naipe[i];\n          pile_values_ordenados[n] = pile_values[i];\n          n++;\n        }\n      }\n    } // ordenando os valores\n\n\n    var aux;\n\n    for (i = 0; i < n - 1; i++) {\n      if (pile_naipe_ordenados[i] === pile_naipe_ordenados[i + 1]) {\n        if (valuesOrder.indexOf(pile_values_ordenados[i]) > valuesOrder.indexOf(pile_values_ordenados[i + 1])) {\n          aux = pile_values_ordenados[i];\n          pile_values_ordenados[i] = pile_values_ordenados[i + 1];\n          pile_values_ordenados[i + 1] = aux;\n        }\n      }\n    }\n\n    setPileSuitSorted(pile_naipe_ordenados);\n    setPileValueSorted(pile_values_ordenados);\n  }, [pileValues, pileSuit, rotationCardValue, rotationCardSuit]); // Combinações Full House\n\n  useEffect(() => {\n    const inputValue = pileValues.map(card => card);\n    const inputSuit = pileSuit.map(card => card);\n    var length = inputValue.length;\n\n    if (length >= 5) {\n      for (var x = 0; x < length; x++) {\n        for (var y = 0; y < length - x - 1; y++) {\n          if (inputValue[y] > inputValue[y + 1]) {\n            var tempValue = inputValue[y];\n            inputValue[y] = inputValue[y + 1];\n            inputValue[y + 1] = tempValue;\n            var tempSuit = inputSuit[y];\n            inputSuit[y] = inputSuit[y + 1];\n            inputSuit[y + 1] = tempSuit;\n          }\n        }\n      }\n\n      const valores = [];\n      const ocorrencias = [];\n      var indexValores = 0;\n      var indexOcorrencias = 0;\n      valores[indexValores] = inputValue[0];\n      indexValores++;\n      ocorrencias[0] = 1;\n      var i;\n\n      for (i = 0; i < inputValue.length - 1; i++) {\n        if (inputValue[i] !== inputValue[i + 1]) {\n          valores[indexValores] = inputValue[i + 1];\n          indexValores++;\n          indexOcorrencias++;\n          ocorrencias[indexOcorrencias] = 1;\n        } else {\n          ocorrencias[indexOcorrencias]++;\n        }\n      }\n\n      var j;\n      var k;\n      var indicesCertos = [];\n      var indexTrios = 0;\n      let trios = [[]]; // buscando pelos trios\n\n      for (i = 0; i < ocorrencias.length; i++) {\n        // salvo os trios quando tem 3 cartas de mesmo valor\n        if (ocorrencias[i] === 3) {\n          indicesCertos = [];\n          k = 0;\n\n          for (j = 0; j < inputValue.length; j++) {\n            if (inputValue[j] === valores[i]) {\n              indicesCertos[k] = j;\n              k++;\n            }\n          }\n\n          trios[indexTrios] = [inputValue[indicesCertos[0]], inputSuit[indicesCertos[0]], inputValue[indicesCertos[1]], inputSuit[indicesCertos[1]], inputValue[indicesCertos[2]], inputSuit[indicesCertos[2]]];\n          indexTrios++;\n        } // se eu tiver 4 cartas de naipes diferentes, tenho 4 combinaçoes de trios possíveis\n        // entao 'ignoro' cada um das cartas, para obter os 4 trios\n\n\n        if (ocorrencias[i] === 4) {\n          indicesCertos = [];\n          k = 0;\n\n          for (j = 0; j < inputValue.length; j++) {\n            if (inputValue[j] === valores[i]) {\n              indicesCertos[k] = j;\n              k++;\n            }\n          }\n\n          trios[indexTrios] = [inputValue[indicesCertos[0]], inputSuit[indicesCertos[0]], inputValue[indicesCertos[1]], inputSuit[indicesCertos[1]], inputValue[indicesCertos[2]], inputSuit[indicesCertos[2]]];\n          indexTrios++;\n          trios[indexTrios] = [inputValue[indicesCertos[0]], inputSuit[indicesCertos[0]], inputValue[indicesCertos[1]], inputSuit[indicesCertos[1]], inputValue[indicesCertos[3]], inputSuit[indicesCertos[3]]];\n          indexTrios++;\n          trios[indexTrios] = [inputValue[indicesCertos[0]], inputSuit[indicesCertos[0]], inputValue[indicesCertos[2]], inputSuit[indicesCertos[2]], inputValue[indicesCertos[3]], inputSuit[indicesCertos[3]]];\n          indexTrios++;\n          trios[indexTrios] = [inputValue[indicesCertos[1]], inputSuit[indicesCertos[1]], inputValue[indicesCertos[2]], inputSuit[indicesCertos[2]], inputValue[indicesCertos[3]], inputSuit[indicesCertos[3]]];\n          indexTrios++;\n        }\n      } // buscando pelas duplas \n\n\n      let duplas = [[]];\n      var indexDuplas = 0;\n\n      for (var l = 0; l < inputValue.length; l++) {\n        for (var m = 1; m < inputValue.length; m++) {\n          // se l<m, pra nao voltar no vetor e ter combinacoes diferentes (a ordem nao importa) \n          // e se o valor das duas cartas fores iguais, add na matriz(x)\n          if (l < m && inputValue[l] === inputValue[m]) {\n            duplas[indexDuplas] = [inputValue[m], inputSuit[m], inputValue[l], inputSuit[l]];\n            indexDuplas++;\n          }\n        }\n      }\n      /**\n       * agora precisamos juntar trios e duplas, verificando as condiçoes possíveis pq nada nessa vida é fácil\n       * \n       * se eu tenho um trio, nao posso ter uma dupla com aquele mesmo valor pois não temos cartas repetidas no deck\n       * entao vou concatenar as duplas nos trios de valores diferentes\n       * \n       * **/\n\n\n      if (trios[0].length > 0 && duplas[0].length > 0) {\n        let fullHouse = [[]];\n        var indexFullHouse = 0;\n\n        for (var trio = 0; trio < trios.length; trio++) {\n          for (var dupla = 0; dupla < duplas.length; dupla++) {\n            if (trios[trio][0] !== duplas[dupla][0]) {\n              fullHouse[indexFullHouse] = [trios[trio][0] + ' ' + trios[trio][1] + ' - ' + trios[trio][2] + ' ' + trios[trio][3] + ' - ' + trios[trio][4] + ' ' + trios[trio][5] + ' - ' + duplas[dupla][0] + ' ' + duplas[dupla][1] + ' - ' + duplas[dupla][2] + ' ' + duplas[dupla][3]];\n              indexFullHouse++;\n            }\n          }\n        } //      console.log(fullHouse);\n\n\n        setFullHouseCombinations(fullHouse);\n      }\n    }\n  }, [pileValues, pileSuit]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"deckid-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }\n  }, \"Ordered Pile\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }\n  }, pileSuitSorted.map((suit, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index + 1000,\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 13\n    }\n  }, \"Card \", index + 1, \"  \"), /*#__PURE__*/React.createElement(Card, {\n    suitDraw: pileSuitSorted[index],\n    valueDraw: pileValueSorted[index],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }\n  }, \"Rotation card \"), /*#__PURE__*/React.createElement(Card, {\n    suitDraw: rotationCardSuit,\n    valueDraw: rotationCardValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }\n  }, \"High card \"), /*#__PURE__*/React.createElement(Card, {\n    suitDraw: pileSuitSorted[0],\n    valueDraw: pileValueSorted[0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }\n  }, \"Full house combinations \"), fullHouseCombinations.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index + 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 17\n    }\n  }, \" \", index + 1, \":  \"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 17\n    }\n  }, value))));\n}\n\nexport default DeckId;","map":{"version":3,"sources":["/home/bognar/Área de Trabalho/frontend-assesment-master/frontend/src/pages/DeckId/index.js"],"names":["React","useState","useEffect","axios","Card","DeckId","pileSuit","setPileSuit","pileValues","setPileValues","pileSuitSorted","setPileSuitSorted","pileValueSorted","setPileValueSorted","rotationCardSuit","setRotationCardSuit","rotationCardValue","setRotationCardValue","fullHouseCombinations","setFullHouseCombinations","url","window","location","pathname","id","substring","lastIndexOf","method","then","response","suits","data","piles","pile_deck","cards","map","card","suit","values","value","pile_rotation","pile_naipe","pile_values","naipes","valores","rotationCardValor","rotationCardNaipe","i","j","naipesOrder","undefined","valuesOrder","pile_naipe_ordenados","pile_values_ordenados","n","aux","indexOf","inputValue","inputSuit","length","x","y","tempValue","tempSuit","ocorrencias","indexValores","indexOcorrencias","k","indicesCertos","indexTrios","trios","duplas","indexDuplas","l","m","fullHouse","indexFullHouse","trio","dupla","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport axios from 'axios';\n\nimport './styles.css';\n\n\nimport Card from '../../components/Card'\n\nfunction DeckId() {\n\n  const [pileSuit, setPileSuit] = useState([]);\n  const [pileValues, setPileValues] = useState([]);\n  \n  const [pileSuitSorted, setPileSuitSorted] = useState([]);\n  const [pileValueSorted, setPileValueSorted] = useState([]);\n\n  const [rotationCardSuit, setRotationCardSuit] = useState();\n  const [rotationCardValue, setRotationCardValue] = useState();\n\n  const [fullHouseCombinations, setFullHouseCombinations] = useState([]);\n\n\n  useEffect(() => {\n    var url = window.location.pathname;\n    var id = url.substring(url.lastIndexOf('/') + 1);\n\n\n    // pega as cartas selecionadas na rota anterior\n    axios({\n      method: 'get',\n      url: `https://deckofcardsapi.com/api/deck/${id}/pile/pile_deck/list/`\n    })\n    .then (response => {\n\n      const suits = response.data.piles.pile_deck.cards.map(card => card.suit);\n      setPileSuit(suits);\n\n      const values = response.data.piles.pile_deck.cards.map(card => card.value);\n      setPileValues(values);\n           \n    });\n\n\n    // pega a carta de rotação selecionada na rota anterior\n    axios({\n      method: 'get',\n      url: `https://deckofcardsapi.com/api/deck/${id}/pile/pile_rotation/list/`\n    })\n    .then (response => {\n\n      setRotationCardSuit(response.data.piles.pile_rotation.cards[0].suit);\n      setRotationCardValue(response.data.piles.pile_rotation.cards[0].value);\n\n    });\n\n  },[]);\n\n\n\n\n  useEffect(() => {\n   \n    // input de cartas\n    const pile_naipe = pileSuit.map(card => card);\n    const pile_values = pileValues.map(card => card); \n\n\n    // ordem proposta\n    const naipes = ['HEARTS', 'DIAMONDS', 'CLUBS', 'SPADES'];\n    const valores = ['2', 'ACE', 'KING', 'QUEEN', 'JACK', '10', '9', '8', '7', '6', '5', '4', '3'];\n\n\n    // carta de rotacao\n    const rotationCardValor = rotationCardValue;\n    const rotationCardNaipe = rotationCardSuit;\n\n    // dividir as array e passar quem ta na frente da rotation card pra trás\n    \n    var i = 0;\n    var j = 0;\n    \n\n    // criando nova array de naipes, com base na carta de rotacao\n    const naipesOrder =[];\n\n    for (i=0; i<4; i++) {\n      if (naipes[i] === rotationCardNaipe) {\n        for (j=0; j<i; j++) {\n          naipesOrder[j] = naipes[i];\n          if (i<4) i++;\n        }\n      }\n    }\n\n    j = 0;\n\n    for (i=0; i<4; i++) {\n      if (naipesOrder[i] === undefined) {\n        naipesOrder[i] = naipes[j];\n        j++;\n      }\n    }\n\n\n    // criando nova array de valores, com base na carta de rotacao\n  \n    const valuesOrder =[];\n\n    for (i=0; i<13; i++) {\n      if (valores[i] === rotationCardValor) {\n        for (j=0; j<i; j++) {\n          valuesOrder[j] = valores[i];\n          if (i<13) i++;\n        }\n      }\n    }\n\n    j = 0;\n\n    for (i=0; i<13; i++) {\n      if (valuesOrder[i] === undefined) {\n        valuesOrder[i] = valores[j];\n        j++;\n      }\n    }\n\n\n    // Ordenando as pilhas de cartas com base na carta de rotação\n\n    const pile_naipe_ordenados = [];\n    const pile_values_ordenados = [];\n    \n\n    var n = 0;\n\n    // ordenando os naipes\n    for (j=0; j<4; j++) {\n      for (i=0; i<13; i++) {\n        if ( pile_naipe[i] === naipesOrder[j] ) {\n          pile_naipe_ordenados[n] = pile_naipe[i];\n          pile_values_ordenados[n] = pile_values[i];\n          n++;\n        }\n      }\n    }\n\n\n    // ordenando os valores\n    var aux;\n    for( i=0; i<n-1; i++) {\n\n      if (pile_naipe_ordenados[i] === pile_naipe_ordenados[i+1]) {\n    \n        if ( valuesOrder.indexOf(pile_values_ordenados[i])  > valuesOrder.indexOf(pile_values_ordenados[i+1]) ) {\n          \n          aux = pile_values_ordenados[i];\n          pile_values_ordenados[i] = pile_values_ordenados[i+1];\n          pile_values_ordenados[i+1] = aux;\n        }\n      }\n    }\n  \n    setPileSuitSorted(pile_naipe_ordenados);\n    setPileValueSorted(pile_values_ordenados);\n\n},[pileValues, pileSuit, rotationCardValue, rotationCardSuit]);\n\n\n\n\n// Combinações Full House\nuseEffect(() => {\n  \n  const inputValue = pileValues.map(card => card);\n  const inputSuit = pileSuit.map(card => card);\n\n\n  var length = inputValue.length;\n\n  if (length >= 5 ) {\n  \n    for (var x = 0; x < length; x++) {     \n      for (var y = 0; y < (length - x - 1); y++) { \n    \n        if(inputValue[y] > inputValue[y+1]) {\n            \n            var tempValue = inputValue[y];  \n            inputValue[y] = inputValue[y+1]; \n            inputValue[y+1] = tempValue; \n\n            var tempSuit = inputSuit[y];  \n            inputSuit[y] = inputSuit[y+1]; \n            inputSuit[y+1] = tempSuit; \n\n        }\n      }        \n    }\n\n\n    const valores = [];\n    const ocorrencias = [];\n    var indexValores = 0;\n    var indexOcorrencias = 0;\n\n    valores[indexValores] = inputValue[0];\n    indexValores++;\n\n    ocorrencias[0] = 1;\n\n    var i;\n\n    for ( i=0; i<inputValue.length-1; i++) {\n      if (inputValue[i] !== inputValue[i+1]) {\n        valores[indexValores] = inputValue[i+1];\n        indexValores++;\n        indexOcorrencias++\n        ocorrencias[indexOcorrencias] = 1;\n      } else {\n        ocorrencias[indexOcorrencias]++;\n      }\n    }\n\n\n    var j;\n    var k;\n    var indicesCertos = [];\n        \n\n    var indexTrios = 0;\n    let trios = [[]];\n\n\n    // buscando pelos trios\n    for ( i=0; i<ocorrencias.length; i++) {\n    \n      // salvo os trios quando tem 3 cartas de mesmo valor\n      if(ocorrencias[i] === 3){\n      \n        indicesCertos = [];\n        k=0;\n        \n        for ( j=0; j<inputValue.length; j++ ) {\n          if ( inputValue[j] === valores[i] ) {\n\n            indicesCertos[k] = j;\n            k++;\n          }\n        }\n        \n        trios[indexTrios] = [inputValue[indicesCertos[0]], inputSuit[indicesCertos[0]],\n                            inputValue[indicesCertos[1]], inputSuit[indicesCertos[1]],\n                            inputValue[indicesCertos[2]], inputSuit[indicesCertos[2]]];\n        indexTrios++;\n        \n      }\n\n\n      // se eu tiver 4 cartas de naipes diferentes, tenho 4 combinaçoes de trios possíveis\n      // entao 'ignoro' cada um das cartas, para obter os 4 trios\n\n      if(ocorrencias[i] === 4){\n      \n        indicesCertos = [];\n        k=0;\n        \n        for ( j=0; j<inputValue.length; j++ ) {\n          if ( inputValue[j] === valores[i] ) {\n\n            indicesCertos[k] = j;\n            k++;\n          }\n        }  \n\n        \n        trios[indexTrios] = [inputValue[indicesCertos[0]], inputSuit[indicesCertos[0]],\n                            inputValue[indicesCertos[1]], inputSuit[indicesCertos[1]],\n                            inputValue[indicesCertos[2]], inputSuit[indicesCertos[2]]];\n        indexTrios++ ;\n        \n        trios[indexTrios] = [inputValue[indicesCertos[0]], inputSuit[indicesCertos[0]],\n                            inputValue[indicesCertos[1]], inputSuit[indicesCertos[1]],\n                            inputValue[indicesCertos[3]], inputSuit[indicesCertos[3]]];\n        indexTrios++ ;\n        \n        trios[indexTrios] = [inputValue[indicesCertos[0]], inputSuit[indicesCertos[0]],\n                            inputValue[indicesCertos[2]], inputSuit[indicesCertos[2]],\n                            inputValue[indicesCertos[3]], inputSuit[indicesCertos[3]]];\n        indexTrios++ ;\n        \n        trios[indexTrios] = [inputValue[indicesCertos[1]], inputSuit[indicesCertos[1]],\n                            inputValue[indicesCertos[2]], inputSuit[indicesCertos[2]],\n                            inputValue[indicesCertos[3]], inputSuit[indicesCertos[3]]];\n        indexTrios++;\n\n      }\n    }\n\n\n    // buscando pelas duplas \n\n    let duplas = [[]];\n    var indexDuplas = 0;\n\n\n    for (var l = 0; l<inputValue.length; l++) {       \n      for (var m = 1; m<(inputValue.length); m++) {  \n        \n          // se l<m, pra nao voltar no vetor e ter combinacoes diferentes (a ordem nao importa) \n          // e se o valor das duas cartas fores iguais, add na matriz(x)\n          if ( ( l<m ) && ( inputValue[l] === inputValue[m] ) ) {\n            \n            duplas[indexDuplas] = [ inputValue[m],inputSuit[m] , inputValue[l],inputSuit[l] ];\n            indexDuplas++;\n                \n        }      \n      }\n    }\n\n  \n    /**\n     * agora precisamos juntar trios e duplas, verificando as condiçoes possíveis pq nada nessa vida é fácil\n     * \n     * se eu tenho um trio, nao posso ter uma dupla com aquele mesmo valor pois não temos cartas repetidas no deck\n     * entao vou concatenar as duplas nos trios de valores diferentes\n     * \n     * **/\n\n     \n    if ( (trios[0].length > 0 ) && (duplas[0].length > 0) ) {\n\n      let fullHouse = [[]];\n      var indexFullHouse = 0;\n\n      for (var trio = 0; trio<trios.length; trio++) {\n        for (var dupla = 0; dupla<duplas.length; dupla++) {\n          \n          if ( trios[trio][0] !== duplas[dupla][0] ) {\n            \n            fullHouse[indexFullHouse] = [ trios[trio][0] + ' '+ trios[trio][1] + ' - ' +\n                                          trios[trio][2] + ' '+ trios[trio][3] + ' - ' +\n                                          trios[trio][4] + ' '+ trios[trio][5] + ' - ' + \n                                          duplas[dupla][0] + ' '+ duplas[dupla][1] + ' - ' +\n                                          duplas[dupla][2] + ' '+ duplas[dupla][3] ];\n\n            indexFullHouse++;\n\n          }\n        }\n      }\n//      console.log(fullHouse);\n\n      setFullHouseCombinations(fullHouse);\n    } \n  }\n  \n},[pileValues, pileSuit]);\n\n\n  return (\n    <div className=\"deckid-container\">\n\n      <h1>Ordered Pile</h1>\n      \n      <div className=\"cards\">\n\n\n      {pileSuitSorted.map(( suit, index )=> (\n          <div key={index+1000} className=\"card\">\n            <span>Card {index+1}  </span>\n            <Card suitDraw={pileSuitSorted[index]} valueDraw={pileValueSorted[index]}/>\n          </div>\n        ))}\n      </div>\n\n\n      <h2>Rotation card </h2>\n      <Card suitDraw={rotationCardSuit} valueDraw={rotationCardValue}/>\n      \n\n      <h2>High card </h2>\n      <Card suitDraw={pileSuitSorted[0]} valueDraw={pileValueSorted[0]}/>\n      \n\n      <h2>Full house combinations </h2>\n\n      {fullHouseCombinations.map(( value, index )=> (\n            <div key={index+500} >\n                <span> {index+1}:  </span>\n                <span>{value}</span>\n            </div>\n      ))}\n\n    </div>\n  );\n}\n\nexport default DeckId;"]},"metadata":{},"sourceType":"module"}